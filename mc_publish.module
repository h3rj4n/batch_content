<?php
/**
 * Implements hook_init()
 */
/* -- Delete line
function mc_publish_init() {
    
}
// */

/**
 * Implements hook_menu()
 */
function mc_publish_menu() {
    $items['admin/config/medische-content/publish'] = array(
        'title' => 'Publish medische content',
        'description' => 'Publish all or certain medische content',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mc_publish_get_settings_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    );
    
    return $items;
}

/**
 * Implements hook_permission()
 */
/* -- Delete line
function mc_publish_permission() {
    
}
// */

/**
 * Page callback drupal_get_form mc_publish_get_settings_form
 */
function mc_publish_get_settings_form($form, &$form_state) {
    $form = array();
    
    $form['content_type'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Content type',
        '#options' => _mc_publish_options(),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send'),
    );
    
    return $form;
}

/**
 * function _mc_publish_options
 *
 * @return array with content types
 */
function _mc_publish_options($id = null) {
    $content_types = node_type_get_types();
    $arr = array();
    foreach ($content_types as $type) {
        if (substr($type->type, 0, 6) == 'medcon') {
            $arr[$type->type] = $type->name;
        }
    }
    if ($id <= 0 && isset($arr[$id])) {
        return $arr[$id];
    } else {
        return $arr;
    }
}

/**
 * callback form validate
 */
function mc_publish_get_settings_form_validate($form, &$form_state) {
    $values = $form_state['values'];
    
    // check if field is not empty
    $content_type = true;
    foreach($values['content_type'] as $type) {
        if ($type != '0') {
            $content_type = false;
        }
    }
    if ($content_type) {
        form_set_error('content_type', t('Field cannot be empty.'));
    }
}

/**
 * callback form submit
 */
function mc_publish_get_settings_form_submit($form, &$form_state) {
    $values = $form_state['values'];
    
    $types = array();
    foreach($values['content_type'] as $type) {
        if ($type != '0') {
            $types[] = $type;
        }
    }
    
    $batch = array(
        'title' => t('Updating content type(s)'),
        'operations' => array(
            array('mc_publish_update_content_types', array($types)),
        ),
        'finished' => 'mc_publish_batch_finished',
    );
    
    batch_set($batch);
}

/**
 * batch callback
 */
function mc_publish_update_content_types($types, &$context) {
    
    if (empty($context['sandbox'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['current_node'] = 0;
        $count = db_select('{node}', 'n')
            ->condition('n.type', $types, 'IN')
            ->countQuery()->execute()->fetchField();
        $context['sandbox']['max'] = $count;
    }
    
    $limit = 5;
    $result = db_select('{node}', 'n')
        ->fields('n', array('nid'))
        ->condition('n.type', $types, 'IN')
        ->condition('n.nid', $context['sandbox']['current_node'], '>')
        ->orderBy('n.nid')
        ->range(0, $limit)
        ->execute();
        
        
    foreach($result as $row) {
        $node = node_load($row->nid);
        $node->published = TRUE;
        node_save($node);
        
        $context['results'][] = $node->nid . ' : ' . check_plain($node->title);
        $context['sandbox']['progress']++;
        $context['sandbox']['current_node'] = $node->nid;
        $context['message'] = check_plain($node->title);
    }
    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
        $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
}

/**
 * batch callback finished
 */
function mc_publish_batch_finished($success, $results, $operations) {
    if ($success) {
        $message = format_plural(count($results), 'One post processed', '@count posts processed');
    } else {
        $message = t('Finished with an error.');
    }
    drupal_set_message($message);
}
?>